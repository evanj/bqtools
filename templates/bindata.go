// Code generated by go-bindata.
// sources:
// source/index.html
// source/loading.html
// source/project.html
// source/select_project.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\xd1\x6f\xdc\xb6\x0f\x7e\xcf\x5f\xc1\x9f\x7f\x0f\x6b\x81\x9c\xb5\xde\xda\x0d\x0b\x1c\x63\x5d\x1b\x74\x01\x06\xb4\x5d\x82\x15\x7b\x1a\x74\x12\x7d\x56\x22\x8b\xae\x48\xdf\xd5\xfb\xeb\x07\xc9\xf6\xe5\x92\x6c\x5d\xb1\x97\x3d\xdd\x59\xa4\x24\x7e\x1f\x3f\x92\xaa\xfe\xf7\xfa\xed\xab\xeb\xdf\xde\x5d\x40\x2b\x9d\xaf\x4f\xaa\xe5\x07\xb5\xad\x4f\x2a\xef\xc2\x2d\x44\xf4\xe7\x05\xcb\xe8\x91\x5b\x44\x29\xa0\x8d\xd8\x9c\x17\xad\x48\xcf\x67\x4a\x19\x1b\x6e\xb8\x34\x9e\x06\xdb\x78\x1d\xb1\x34\xd4\x29\x7d\xa3\x3f\x29\xef\x36\xac\x36\x83\xef\xb4\xfa\xba\x5c\x97\xdf\x28\xc3\xf3\x77\xd9\xb9\x50\x1a\xe6\xa2\x3e\xa9\xc4\x89\xc7\xfa\x47\xb7\x7d\x3f\x60\x1c\xe1\x9a\xc8\xf3\x19\xbc\x22\x16\xd8\x39\x1e\xb4\x77\x7f\x68\x71\x14\x2a\x35\x79\x9e\x54\x6a\x8e\x6e\x43\x76\xac\x4f\x2a\x46\x93\xec\x60\xbc\x66\x3e\x2f\x5a\x8c\x04\x8e\x57\x7d\x74\x9d\x8e\x63\x51\x9f\x00\x54\xd6\xed\x8e\xed\xab\xb4\x35\x5b\xee\xdb\x0c\x05\xd1\x2e\x60\x9c\x6d\x00\x55\xfb\x6c\x31\xe6\xeb\xd3\xc9\xcf\x8a\x07\xe1\x56\xaa\x7d\x76\xb7\x61\xbd\x6c\xe0\x61\x73\xd8\xf3\xbc\xa8\x2f\x03\x8b\x0e\xe2\x47\x60\x44\xd8\xb7\xce\xb4\x60\xb5\x68\x46\xe1\x53\x10\xbd\xf1\xc8\xa0\x83\x85\x8f\x03\x46\x87\x0c\x26\x71\x20\x2d\x42\x47\x2c\x95\x6a\xd7\x73\xc0\xca\xba\x5d\x46\x35\xfd\xa9\xd4\xcc\x40\x7d\xf2\x88\x8c\xf9\xf3\x11\x09\x09\x28\x06\x49\x91\x75\x68\xdd\xd0\xc1\x43\xe8\x0f\x81\x17\xf5\xaf\x73\x36\x10\x0e\xe8\x53\x84\x47\xe8\xab\x7e\xfa\xbd\xcf\x0e\x70\x4b\x7b\x86\x91\x06\xd8\xb7\x5a\x0e\x98\x33\xd6\x05\x76\x44\x10\x7d\xeb\xc2\x16\x86\xfe\x80\x19\xb8\xd7\x06\x4b\xf8\x80\x60\x22\x6a\x41\x0b\x4e\xa0\xa1\x08\x34\x44\x46\xbf\x43\x3e\x85\xcd\x20\x60\xd1\x38\x8b\x16\x84\x92\x5a\x51\x33\x2e\x8e\x4d\x44\x04\x17\xc0\xa4\x35\x92\x16\x23\x43\xe3\x42\x3e\x68\x60\x6c\x06\x5f\xce\xa4\xf6\x5f\x48\x69\xd2\xcf\xbf\x13\x15\xb4\x9a\x57\x82\x9f\x64\x65\x30\x08\x46\xb4\x77\x32\xd3\x73\x55\x29\x16\x1d\xa5\x58\xf6\x6e\x06\x11\x0a\x47\x72\x4e\x7f\xbd\x8e\x5b\x2c\xea\x37\x28\x70\x95\xbc\xd1\x56\x4a\xff\xb7\xda\xf8\x89\xf6\x89\xd1\x3d\xc5\xdb\xfb\x7a\x78\x20\x85\x88\x1f\x07\x64\x61\x10\xec\x7a\x8a\x09\x50\x44\x6d\x57\x14\xfc\x08\xda\x18\x64\x4e\x49\x5c\x76\x95\x70\x99\xd3\xc4\x59\x12\x07\x92\x0e\xad\x27\x35\x9d\x72\x4b\xb4\xf5\x53\xdb\xd9\xb8\x6d\x2a\x9e\x51\x59\x32\xac\x22\x36\x18\x31\x18\x54\x11\x59\xd4\x6e\xad\x26\xb5\xa9\x2d\xca\x71\x09\xa7\x45\x78\xf9\xee\x32\xb1\x98\x6e\xdf\xa2\x00\x8b\x16\xc7\xe2\x0c\x67\x19\x69\xef\x17\xa9\xba\x90\x83\xe9\x23\xdd\xa0\x91\x2c\x6b\x46\x8f\x46\xd0\x96\x70\xa7\xa5\x99\xa8\xf8\x77\x8c\x5d\xa1\x19\xa2\x93\xf1\x1e\x5b\x1f\x70\x61\x68\xba\x03\x63\xe7\x98\x1d\x05\x86\x3d\x82\xd1\xe1\x0c\x7e\xf9\x0c\x5d\xf0\xe4\x11\x4d\x67\x2a\x29\xca\xdc\xd2\x0e\x63\xe3\x69\x9f\x69\xca\x37\xa4\x53\xd5\xfa\xc5\xf7\xdf\x7e\xb7\x7e\xfe\x42\xa5\xca\x5c\x51\x8f\x31\xf7\x5a\x5e\x59\x42\x5e\x49\x8b\xab\x85\xd2\x55\xca\x53\xba\x77\xc5\x86\x7a\x5c\x69\xef\x69\x5f\xd4\x8b\xb9\x5c\xcc\x89\x48\xc8\x2e\x89\xce\xa7\xb9\x78\xf3\xfa\x02\xac\xc2\xae\x3e\x64\xbf\x52\xd8\xd5\x33\x92\x53\x60\x9a\x61\x06\x92\x05\xde\x48\x43\x3c\x90\x4d\x01\xa1\x4d\x0b\xba\x11\x8c\x99\x7b\xe3\x89\x71\xf2\xda\x44\xda\x33\x46\x78\xe2\xc2\x63\xad\x58\xdc\xa1\x4f\x00\xf9\x58\x30\xce\x62\x10\x27\xa3\xea\x23\x09\x19\xf2\xac\xde\xbe\x1c\xa4\x5d\x7f\xc0\xcd\x15\xc6\x1d\xc6\xff\x53\xd3\x78\x17\xb0\xa8\x27\xc3\x19\x54\x86\x2c\xd6\x53\x78\xbf\xcb\xd8\xe3\x39\x85\xe4\x51\xa9\x6c\x98\x61\x3f\x14\xfe\x10\xb2\x74\x5e\xf6\x3d\x5c\x84\xad\x0b\x98\xd0\xbe\xc9\x91\x40\xa7\x83\xde\x22\x03\xcf\x9a\x80\xa1\xb7\x5a\xe6\x69\x30\xf3\x90\x6a\x30\x92\x2f\xe1\xba\x75\x9c\x7b\x68\xe6\x8a\x7c\x92\x1e\x38\x06\x16\x8a\xa9\x41\x06\xd0\x5f\x50\x29\xfc\xd1\x4f\x45\x52\xd4\xaf\x92\x0d\xae\xde\xff\x9c\xf5\x9f\x4e\xde\x68\xc6\xa3\x6c\x80\xa1\xae\x1f\x04\xb3\x26\x5d\x68\x28\x76\x59\x25\xc9\x9c\x7a\x7b\x62\x3f\xe7\xd9\xa2\xc7\xec\xb6\x44\x48\x29\x18\xab\x9d\x1f\x61\xa3\xd9\x65\xb1\xea\x1d\x39\x0b\x1e\xa7\x6e\x7f\x74\x5c\x79\x54\x37\x7d\xfd\x1a\xb9\x77\x72\x98\x0a\xa9\x00\xa9\x99\x2b\x0f\x8d\x1e\xe4\xa8\x2a\x4e\x41\x4f\x05\x83\xc1\x2e\x5e\x56\x8f\xa7\x59\x20\x69\xb4\x6c\xa3\x0e\x92\x87\xcb\x3f\x75\x9e\x2c\xa4\x43\xee\x66\xdd\x65\x2e\x46\x1a\xbe\xf2\x1e\x5a\xbd\xc3\xe4\x28\x71\xe0\xd4\x9b\x72\x8e\xd2\x26\xa6\x46\xf6\xe9\xfd\x03\xd7\x69\x0a\xd9\xc1\x24\x26\xb4\x40\x74\x7c\x0b\xcd\x10\xd3\xf0\x39\xcd\xb1\x25\x9d\xa4\x94\x51\x8f\x01\x98\x86\x98\x86\xdc\x65\x73\x08\xb7\xd7\x51\x07\x72\x76\x02\x90\x32\x10\x87\x30\x85\x46\xfb\x00\x2e\x3f\x24\x96\xc1\xa8\x03\x68\xcf\x94\x62\xdd\xe8\x8d\x1f\xa1\x45\xdf\x83\x9b\x4e\xdb\xeb\x20\x79\x2a\xfe\xf5\xfe\x8b\x4e\x3b\x7f\xa7\x96\xf4\x25\x74\x86\x37\x3f\xe0\x4e\x87\x1b\x0a\xc8\xa5\xd1\x45\x7d\xb1\xd3\x01\x9e\x3c\x58\x7e\x9a\xe5\x32\xdf\x13\x10\x6d\xbe\xb8\xfc\xcc\x20\x55\xf3\x83\x4d\xe5\x47\xe6\x9f\x01\x00\x00\xff\xff\x71\x0e\x37\xc6\x7b\x0a\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 2683, mode: os.FileMode(420), modTime: time.Unix(1479575277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _loadingHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x92\x4f\x8f\xd3\x30\x10\xc5\xef\xf9\x14\x83\x25\x24\x38\xd4\x6e\xe1\xb6\xb8\x39\xb0\x70\x44\x2c\xa8\x17\x8e\xae\x33\x4d\xdc\xf5\x9f\x68\xc6\x49\x37\xac\xfa\xdd\x51\xda\xa4\x0a\xbb\x7b\x4a\x66\x9e\xfd\xde\xcf\xa3\xd1\xef\xbe\xfd\xbc\xdf\xfd\x79\xf8\x0e\x4d\x0e\xbe\x2c\xf4\xfc\x41\x53\x95\x85\xf6\x2e\x3e\x02\xa1\xdf\x0a\xce\x83\x47\x6e\x10\xb3\x80\x86\xf0\xb0\x15\x4d\xce\x2d\xdf\x29\x65\xab\x78\x64\x69\x7d\xea\xaa\x83\x37\x84\xd2\xa6\xa0\xcc\xd1\x3c\x29\xef\xf6\xac\xf6\x9d\x0f\x46\xad\xe5\x27\xf9\x59\x59\x9e\x6a\x19\x5c\x94\x96\x59\x94\x85\xce\x2e\x7b\x2c\xbf\xba\xfa\x57\x87\x34\xc0\x2e\x25\xcf\x77\x70\x9f\x38\x43\xef\xb8\x33\xde\xfd\x35\xd9\xa5\xa8\xd5\xf5\x64\xa1\xd5\x44\xb7\x4f\xd5\x50\x16\x9a\xd1\x8e\x3a\x58\x6f\x98\xb7\xa2\x41\x4a\xe0\x78\xd5\x92\x0b\x86\x06\x51\x16\x00\xba\x72\xfd\x52\x5f\x8d\x57\x2f\xca\xff\x9a\x4d\x31\x1b\x17\x91\x26\x0d\x40\x37\x9b\x59\xbc\xc4\x8f\xce\x1b\xf1\x02\x57\xab\x66\x33\x99\xa9\xca\xf5\x97\xc4\xeb\x8f\x56\x13\x5d\x59\xbc\x02\x9d\xca\x57\x80\x23\x04\xc6\x3c\x26\x05\xac\x5c\x17\xe0\x25\xd6\x02\x8a\xbb\xfd\x85\x4b\x94\xbf\xd1\x54\x2e\xd6\x10\x30\x9b\xca\x64\x03\x07\x4a\x01\x6e\xa0\x52\xca\x05\x66\x4b\xa9\x26\x64\x9e\x6d\x6e\xb5\xe3\x95\x37\x54\xe3\x72\x82\xd0\x1b\xdf\xe1\x56\x3c\x3f\xcb\x07\x24\x8b\x31\x9f\xcf\x02\x82\x79\xda\x8a\xcd\x7a\x2d\xca\x65\xff\xbd\x56\xb3\xd7\x1c\x35\xea\x3f\x90\xd9\xd4\x78\x3e\x6b\xd5\xde\xfa\x1f\x76\x8d\x1b\x13\xc1\x76\x44\x18\xb3\x1f\xa0\x1f\x51\xd9\xa7\x13\x1c\x12\xc1\x95\xa4\xa5\x74\x44\x9b\xf9\x0b\x9c\x10\x0c\x21\x9c\x12\x3d\x8e\x2f\x4d\x11\x5c\xfe\x38\x39\xbe\x35\x70\x35\x6d\x88\xba\x6e\xf5\xbf\x00\x00\x00\xff\xff\x04\xee\xf9\xca\xed\x02\x00\x00")

func loadingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_loadingHtml,
		"loading.html",
	)
}

func loadingHtml() (*asset, error) {
	bytes, err := loadingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "loading.html", size: 749, mode: os.FileMode(420), modTime: time.Unix(1479576123, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _projectHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\x4f\x6f\xe2\x38\x14\xbf\xe7\x53\xbc\xb5\xba\xd2\xee\x81\x18\xba\xda\x0b\x84\x1c\x5a\x76\xb5\x95\x76\x66\x18\x0d\x97\x39\x9a\xe4\x41\xdc\x71\x6c\x64\x1b\x0a\xb2\xf2\xdd\x47\x0e\x0e\x24\x90\x56\xed\xcc\x1c\x7b\x32\x8f\xf7\xff\xfd\x7e\xcf\xb1\x73\x39\xae\xb8\x44\x20\x33\x6e\x36\x82\x1d\xe6\x5a\x3d\x62\x66\x49\x55\x39\x17\xff\xab\x39\xca\x5c\x1c\x3e\xb2\x12\xfd\x1f\x7c\x05\x12\x21\x7e\x98\xc1\x85\x0a\xfe\x70\x2e\x7e\x98\x55\xd5\x9f\xce\xa1\xcc\xbd\x6d\x7d\x44\xc9\x6f\xb3\x4f\xf7\x8b\xaf\xf3\x7f\xa0\xb0\xa5\x48\xa3\xa4\x39\x90\xe5\x69\x94\x08\x2e\xbf\x81\x46\x31\x25\xc6\x1e\x04\x9a\x02\xd1\x12\x28\x34\xae\xa6\xa4\xb0\x76\x63\xc6\x94\x66\xb9\x7c\x34\x71\x26\xd4\x36\x5f\x09\xa6\x31\xce\x54\x49\xd9\x23\xdb\x53\xc1\x97\x86\x2e\xb7\xa2\x64\x74\x18\xdf\xc6\x7f\xd1\xcc\x04\x39\x2e\xb9\x8c\x33\x63\x48\x1a\x25\x96\x5b\x81\xe9\x1d\x5f\x7f\xde\xa2\x3e\xc0\x42\x29\x61\xc6\xe0\x9c\xc5\x72\x23\x98\xbd\x6e\x1d\xe2\xaa\x4a\xe8\xd1\x2d\x4a\x68\x28\x75\xa9\xf2\x43\x1a\x25\x06\x33\xcb\x95\x84\x4c\x30\x63\xa6\xa4\x40\xad\x80\x9b\xc1\x46\xf3\x92\xe9\x03\x49\x23\x80\x24\xe7\xbb\xb6\x7e\xe0\x5d\x6b\x4d\x57\x97\x29\x69\x19\x97\xa8\x83\x0e\x20\x29\x46\x8d\xb2\x4e\xef\x23\x8f\xc8\xdb\x6b\x2f\x46\x21\x1b\xcd\xf9\xae\x2e\xe9\xf8\x23\xa1\xa1\xfc\x34\xba\xea\x24\x88\x24\x7d\xbe\xc4\xae\x46\x6c\x4b\x69\x7a\xdb\xf2\x1a\x5f\xba\x64\x5a\xab\x27\xf0\x41\x50\xda\x76\x97\xe9\x42\x59\x26\x0c\xac\x94\x7e\x5d\x37\x8d\xab\x65\x4b\x81\xa7\x19\x79\x81\x40\x4d\x9d\x29\x79\xe2\xb9\x2d\xc6\xc0\xb6\x56\x4d\x4e\xb9\xbc\x8b\x3e\x0b\x5e\x2c\x2e\x1c\x46\xc3\xe1\x66\x3f\x21\xe9\xdd\xc1\xa2\x49\xa8\x2d\xba\xe6\x79\xea\x5c\xfc\xdf\xb6\x64\xb2\x36\xa8\xa9\x91\xb7\xc2\xd3\x76\xfc\x57\x27\xbb\x57\xc6\xf6\xe5\xba\x71\x6e\xa3\xb9\xb4\x2b\x20\xbf\xc7\xb7\x2b\x02\x71\x3d\x29\x6f\x5e\x55\xb4\x54\xd2\x16\xcf\xe7\x4f\x68\x3d\x91\x7e\xec\xdf\x8a\x5f\x40\xed\x8c\x63\x07\xbf\xff\x99\x5e\xa3\xb1\x30\x63\x96\x19\xb4\xe6\xe7\x51\x3a\xae\x59\x7b\x1a\x9d\x51\xd6\x26\xe9\xe5\xc8\x5e\xf8\xb7\x49\x68\x71\x6f\x07\x4c\xf0\xb5\x1c\x83\xe6\xeb\xc2\x4e\x48\x7a\x43\x3f\x84\x49\xbe\xcd\xaf\x97\x22\xc7\x1a\xc2\x20\xe0\x61\x76\x05\x6b\x97\x21\x34\x74\xda\x6a\xfd\x78\xb5\x9c\x3d\x9c\xbb\xb1\x1e\xf5\x3a\x1d\x8c\xa7\x81\x04\x81\x7f\x1d\x43\xcd\xe4\x1a\x21\x0e\xd9\xbf\x58\xa5\xd9\x1a\x3b\x36\x3d\x73\xcc\x9b\x1e\x77\xa8\x2d\xcf\x98\x68\xfa\x2c\x79\x9e\x0b\x9c\xc0\x05\x59\x93\x8d\x56\x6b\x8d\xc6\x34\x90\x9e\x64\x6e\x06\xa6\x64\x42\x10\xd8\x31\xb1\xc5\x29\x19\xfd\x4d\xa0\x64\xfb\x29\x19\x0d\x87\x97\x98\x37\xe1\x9c\x8b\xe7\xa8\x33\x4f\xae\x56\x9f\x7e\xb1\x9a\xb8\x69\x97\xe3\x17\x55\x87\x70\xb7\x3e\x1a\xf4\xc1\xf4\x7c\x82\x17\xa2\xf6\xf2\xe4\x6a\x1b\x67\x4a\x08\xa6\xcd\x1c\x75\xcd\xa0\x1f\x88\xf9\xe2\x6d\x02\xe7\x2b\xc7\x7f\x4d\x2f\x95\x5d\x2a\x79\xfc\x8f\x5f\xd9\x96\xbe\xcd\xa5\xd3\x7d\x10\xf5\x6c\xee\xc2\xab\xde\xf7\xb6\x1e\xc3\x2f\xda\xda\xb0\x8c\x75\xc8\xf7\x55\x7c\x5f\xc5\xbe\x55\x84\xde\x67\x99\x3f\xda\x8f\xb3\x28\xa1\xe1\xbd\x49\xeb\x07\xf3\xf7\x00\x00\x00\xff\xff\xb0\x78\xf5\xaf\xa7\x0b\x00\x00")

func projectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_projectHtml,
		"project.html",
	)
}

func projectHtml() (*asset, error) {
	bytes, err := projectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "project.html", size: 2983, mode: os.FileMode(420), modTime: time.Unix(1479578679, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _select_projectHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\xb1\x8e\xd4\x30\x10\xed\xf3\x15\x43\x2a\x28\x62\xdf\x01\x12\xd2\xc9\x97\x02\x0e\xa4\x6b\xe0\x10\xd7\x50\x4e\xec\xc9\xc6\x7b\x8e\x1d\x6c\xef\x42\x64\xe5\xdf\x91\xb3\xd9\x25\x7b\x4b\x41\x41\xe5\xd8\x6f\xe6\xbd\xe7\x17\x4f\x4a\x8a\x5a\x6d\x09\xca\x3b\x1d\x06\x83\xe3\x83\x77\x5b\x92\xb1\x9c\xa6\x94\xd8\x27\xaf\xc9\x2a\x33\x7e\xc6\x9e\xf2\x81\x6e\xc1\x12\xb0\x7b\x05\xcf\x20\x78\x99\x12\xbb\x57\xd3\xf4\x2a\x25\xb2\x2a\xd7\xce\x4b\x21\x5e\xdc\x7d\xf9\xf0\xf8\xfd\xe1\x23\x74\xb1\x37\x75\x21\x8e\x0b\xa1\xaa\x0b\x61\xb4\x7d\x02\x4f\xe6\xb6\x0c\x71\x34\x14\x3a\xa2\x58\x42\xe7\xa9\xbd\x2d\xbb\x18\x87\x70\xc3\xb9\x54\x76\x1b\x98\x34\x6e\xa7\x5a\x83\x9e\x98\x74\x3d\xc7\x2d\xfe\xe2\x46\x37\x81\x37\x3b\xd3\x23\xbf\x62\xaf\xd9\x1b\x2e\xc3\xb2\x67\xbd\xb6\x4c\x86\x50\xfe\x1f\x8d\xd6\xd9\x58\xe1\x4f\x0a\xae\x27\xfe\x96\xbd\x63\x57\xb3\xd4\xfa\x78\xad\x18\x75\x34\x54\xbf\xd7\x9b\xaf\x3b\xf2\x23\x3c\x3a\x67\xc2\x0d\x7c\x23\x43\x32\x02\xc2\x70\x88\x58\xf0\x43\x5d\x21\xf8\x92\x46\xe3\xd4\x58\x17\x22\x90\x8c\xda\x59\x90\x06\x43\xb8\x2d\x3b\xf2\x0e\x74\xa8\x06\xaf\x7b\xf4\x63\x59\x17\x00\x42\xe9\xfd\x1a\xaf\x72\xeb\x8c\x9c\x63\xd2\xd9\x88\xda\x92\x5f\x30\x00\xd1\x5d\x1f\xc1\x59\x3e\x33\x5f\x97\xcf\xcc\x0a\xde\x5d\x2f\x64\x5c\xe9\xfd\xac\x78\xf8\x10\x7c\x71\x57\x17\x17\x46\x97\xed\x85\x41\xe9\xcc\xae\xb7\x21\x2b\xf5\xae\xd1\x86\xfe\x6a\x34\xd7\xe4\x92\x0e\x4d\x9b\x57\xd7\xb6\x81\x62\xe5\x2c\x55\x3f\x76\xe8\xe3\xfa\x0e\x16\x4f\x8d\x03\x5a\x32\x27\x04\x40\x0c\x67\x48\x95\xa3\xd5\x76\x53\xd6\x97\xf1\x0f\x75\x71\x6a\x4b\xc9\xa3\xdd\x10\xb0\xe5\xfd\x87\x69\xfa\x43\x89\xe7\x94\x8d\x71\xf2\x29\x5b\x44\x19\xf5\x9e\x8e\x6f\x89\x2f\xc4\x81\x2f\xb3\xb0\x72\x05\x20\xc2\x80\xf6\x9c\x47\xcb\x1c\x96\xd0\xc7\xd3\x16\xa1\xc5\x4a\x61\xc4\x06\x03\x95\xb5\xe0\xba\x16\x3c\xf7\xad\x89\x52\x8a\xd4\x0f\x06\xe3\xe5\xcc\x02\x5b\xbb\xe6\x58\xaf\xae\x77\x18\xc7\x63\x80\xdc\xe2\xfe\x1f\x7e\x30\x5f\x5e\x24\x9f\xa7\xf6\x77\x00\x00\x00\xff\xff\xc5\x3b\xcc\xed\x2c\x04\x00\x00")

func select_projectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_select_projectHtml,
		"select_project.html",
	)
}

func select_projectHtml() (*asset, error) {
	bytes, err := select_projectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "select_project.html", size: 1068, mode: os.FileMode(420), modTime: time.Unix(1479576707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"loading.html": loadingHtml,
	"project.html": projectHtml,
	"select_project.html": select_projectHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"loading.html": &bintree{loadingHtml, map[string]*bintree{}},
	"project.html": &bintree{projectHtml, map[string]*bintree{}},
	"select_project.html": &bintree{select_projectHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

