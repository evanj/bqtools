// Code generated by go-bindata.
// sources:
// source/index.html
// source/loading.html
// source/project.html
// source/select_project.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x58\xdf\x6f\xdb\xc8\x11\x7e\xf7\x5f\x31\x65\x5b\x34\x07\x58\x5c\x49\x89\xcf\xad\x43\x13\xcd\x2f\xa4\x01\xae\xb8\xbb\x3a\x68\xd0\xa7\xc3\x88\x1c\x92\x6b\x2f\x77\x99\x9d\xa1\x64\xf5\xaf\x2f\x76\x49\xca\xb2\x15\xc7\xa9\xd3\x14\x77\x4f\x12\x77\x76\x76\xe7\xfb\xbe\x19\x6a\x46\xd9\xef\x5e\xff\xf8\xea\xfd\xbf\x7e\x7a\x03\x8d\xb4\x26\x3f\xca\xa6\x0f\xc2\x32\x3f\xca\x8c\xb6\x57\xe0\xc9\x9c\x27\x2c\x5b\x43\xdc\x10\x49\x02\x8d\xa7\xea\x3c\x69\x44\x3a\x3e\x53\xaa\x28\xed\x25\xa7\x85\x71\x7d\x59\x19\xf4\x94\x16\xae\x55\x78\x89\xd7\xca\xe8\x15\xab\x55\x6f\x5a\x54\xf3\x74\x99\x3e\x55\x05\x8f\xcf\x69\xab\x6d\x5a\x30\x27\xff\x9b\x3b\x2a\x67\x65\x86\x1b\x62\xd7\x92\x7a\x96\x9e\xa6\xf3\x78\xd5\xfe\xf2\xfe\x8d\xa2\xc5\x50\xfe\x52\xd7\x3f\xf7\xe4\xb7\xf0\xde\x39\xc3\x67\xf0\xca\xb1\xc0\x5a\x73\x8f\x46\xff\x1b\x45\x3b\x9b\xa9\x61\xe7\x51\xa6\x46\x3e\x56\xae\xdc\xe6\x47\x19\x53\x11\xec\x50\x18\x64\x3e\x4f\x1a\xf2\x0e\x34\xcf\x3a\xaf\x5b\xf4\xdb\x24\x3f\x02\xc8\x4a\xbd\xde\xb7\xcf\x82\x6b\xb4\xdc\xb6\x15\xce\x0a\x6a\x4b\x7e\xb4\x01\x64\xcd\x62\x32\xc6\xeb\xc3\xc9\x8b\xe4\x4e\xb8\x99\x6a\x16\x37\x0e\xcb\xc9\x81\xfb\xd5\xce\xe7\x59\x92\x5f\x10\xc1\xa6\xd1\x45\x03\x25\x0a\x32\x09\x1f\x83\xe0\xca\x10\x03\xda\x12\x3e\xf6\xe4\x35\x31\x14\x01\xb9\x34\x04\xad\x63\xc9\x54\xb3\x1c\xc3\x54\xa5\x5e\x47\x2c\xc3\x97\x4c\x8d\xb8\xf3\xa3\x03\x0a\xc6\xc7\x03\xe8\x01\x1e\x59\x09\xf1\xb4\x54\xea\xbe\x85\xbb\x80\xef\xc2\x4d\xf2\x7f\x8e\x1a\x10\xec\x30\x87\x08\xf7\x30\x67\xdd\xf0\x39\xe0\x43\xd9\xc1\x8b\xb0\x26\x84\x9e\x40\xf0\x4a\xdb\x1a\xfa\x6e\x07\x0f\xb8\xc3\x82\x52\xb8\x39\x17\xd0\xa2\xd9\xb2\x0e\x3c\xb4\x61\x37\x3b\x67\xd3\x91\x81\xee\x0b\xf1\x07\x89\x3f\xab\xfb\x27\x84\x37\x7d\x6b\x39\xc9\x0f\x17\x03\x5b\x0d\x9a\x2a\x7c\xba\xaa\x62\x92\x99\xb3\x34\xfb\xd8\xa3\x97\xfd\x44\xf9\x04\xcf\x2b\x77\xbd\xb3\x47\x6e\xf3\x1f\xd0\xd7\xc4\x02\xaf\x47\x8a\x06\x16\x6f\xb6\x44\xb6\x76\x0a\x84\x87\xbd\x03\x82\x7d\x48\x7d\x80\xfd\x35\x7f\x7b\x21\x6e\xcb\x33\x25\xcd\x7f\xb1\x0e\xb1\xdc\xcf\x13\xa1\x6b\x99\xa1\xd1\xb5\x3d\x03\xaf\xeb\x46\x9e\x27\xf9\x1f\xd4\xdf\x9d\x95\xe6\x11\x9e\x2f\xb7\x42\x7c\x5f\x24\x23\x07\xf0\xee\xf5\xe1\x8e\x4c\xdd\x46\x15\x76\x44\xe4\xb7\xc8\x18\x5e\x00\x0f\x92\x51\x4e\x21\xae\xc9\x8b\x2e\xd0\x4c\x61\xb6\xba\x2c\x0d\x3d\x87\x8d\x2e\xa5\x39\x83\xc5\x7c\xde\x5d\x3f\x4f\xee\x1e\x10\x32\xdc\xbb\xda\x13\xf3\xa4\xcc\xee\x59\xf3\x8c\x5b\x34\x26\x81\x35\x9a\x9e\xce\x93\xd3\x93\x04\x5a\xbc\x3e\x4f\x16\xf3\x79\x32\xdd\x7b\xe7\xfc\xd3\x93\x4c\x4d\x27\x1c\x44\xab\xa4\xfc\x0c\x82\xf1\xa4\x65\x38\x08\x3e\xc5\xf8\xe9\xc9\x1f\x1f\x38\xe2\x93\x0a\x2f\xe6\xe9\xe9\xf7\x8f\x70\x3c\x79\xfa\xe7\x74\x0e\x6f\xf5\xcb\x7b\x7c\xf3\x4c\x4f\x9c\x55\x08\x15\xce\xc2\xbb\x61\x85\x4c\x49\x9e\x29\x9d\x43\x49\xeb\x5f\x2a\xe7\x0e\xbd\xef\x26\x00\xc0\xaf\x4b\xe7\xe5\xf2\x61\x9d\x97\xcb\x6f\xa7\xf3\x72\xf9\x28\x9d\x9f\xa6\x8b\xf9\x23\xfc\x16\x27\x27\x5f\x25\xf3\x6f\x53\xe2\x2f\x50\xf8\x1b\x0a\xfc\x28\x7d\xe7\xe9\xf2\xd9\x63\xf4\x5d\xa6\xcb\xaf\xac\xe2\x15\xfa\xdf\x9e\xc4\x8b\x87\x25\x5e\x7c\x3b\x89\x17\x8f\x94\xf8\x51\x25\x7c\x92\x2e\xbe\x42\xe1\x2f\x52\x37\x53\x77\x7e\x91\x33\x15\x5b\x98\x5d\x8b\x34\xb5\xb0\xd3\xd7\x71\xe1\xfe\x36\x1c\x1a\xe4\x59\x44\x53\x90\x15\xf2\x54\xde\xf4\x5b\x38\x4e\x25\x8a\x05\xbd\x24\x93\xef\xaa\x17\x71\x76\x6f\x00\x08\x5f\x4d\x68\xbb\x92\xfc\x2d\x09\x5c\x84\xdd\x54\x66\x0a\xff\xbf\x7d\xb5\x9f\x70\x1e\x74\xd8\x7f\x73\x1b\xd0\x02\x1b\xe7\xaf\x6e\x77\xd5\xb7\x87\x0c\xf0\xf4\xb1\x27\x16\x06\xa1\xb6\x73\x3e\x40\xf3\x84\xe5\xcc\x59\xb3\x05\x2c\x8a\x90\xe1\xe2\x76\x6d\x7a\x0a\xef\x04\x7a\x26\x8e\xdd\xf6\x8e\xae\xdd\x10\x17\xc6\xb7\xb4\x76\xae\x36\xc3\x00\xb7\xd2\x75\x18\x41\xb6\xaa\x74\x05\x2b\x4f\x15\x79\xb2\x05\x29\x4f\x2c\x6a\xbd\x1c\xa4\x64\x55\x93\xec\x8f\x3f\xb1\x5f\x7d\xf1\xd3\xbb\xc0\x67\xb8\xbd\x26\x01\x16\x14\xcd\xa2\x0b\x86\xca\x79\x40\x63\xa6\x29\x40\xdb\x18\x4c\xe7\xdd\x25\x15\x12\x23\x94\x86\x2c\x14\x68\x8a\xde\xa0\x8c\xc1\x62\x5d\x7b\xaa\x51\x08\x58\x9c\xc7\x9a\xa0\x67\xac\xe9\x38\x0e\x14\xdc\xb8\x0d\x03\x02\xbb\xa0\x23\x18\xcd\x02\xae\x8a\x7e\xe2\xba\xf1\xa6\x14\x6e\x46\x86\x7b\x68\xbf\xa0\xa2\xf7\x5a\xb6\xb7\x28\xff\x40\x13\xcd\x43\xa0\xe4\x5b\xcd\xac\x9d\x65\xd8\x10\x14\x68\xcf\xe0\x1f\x9f\xe1\x1c\x9e\x1c\x70\x7d\xa6\x42\x82\x16\x57\x6e\x4d\xbe\x32\x6e\x13\xb9\x8e\x37\x84\x53\xd5\xf2\xe4\x2f\xdf\x9f\x2e\x9f\x9d\xa8\x30\x39\xcd\x5c\x47\x3e\x0e\xbb\x3c\x2b\x1d\xf1\x4c\x1a\x9a\x4d\xba\xcc\x82\xd8\xe1\xde\x19\x17\xae\xa3\x19\x1a\xe3\x36\x49\x3e\x99\xd3\xc9\x1c\xd4\x80\xb8\x25\x68\xf2\x5d\x0a\x1f\x08\xe2\xfa\x04\x2c\xa3\x36\xdf\xa5\x50\xa6\xa8\xcd\x47\x24\xc7\xc0\x6e\x84\x69\x9d\x4c\xf0\xb6\xae\xf7\x93\x62\xe0\x2c\x41\x13\x16\xb0\x12\xf2\xc1\x06\x85\x71\x4c\xc3\xae\x95\x77\x1b\x26\x0f\x4f\xb4\x3d\x4c\xb8\x92\xd6\x64\x02\x40\xde\xcf\x3a\x5d\x92\x15\x2d\xdb\xf0\x92\x15\x57\x38\xc3\xea\xc7\x17\xbd\x34\xcb\x0f\xb4\xba\x20\xbf\x26\xff\x7b\x57\x55\x46\x5b\x4a\xf2\xc1\x70\x06\x59\xe1\x4a\xca\x87\xf0\x7e\x91\x6d\x47\xe7\xce\x86\x1d\x99\x8a\x86\x11\xf6\xdd\xea\xe9\x6d\xcc\xbf\x17\x5d\x07\x6f\x6c\xad\x2d\x05\xb4\x6f\x63\x24\xd0\xa2\xc5\x9a\x18\x78\xcc\x09\xe8\xbb\x32\x66\x63\x48\xb8\x91\x87\x50\xd2\xde\x99\x14\xde\x37\x9a\xe3\x8c\x1b\xb9\x72\xc6\x04\x62\x34\xc7\x5c\xa5\x32\xdc\x81\x5f\x50\x6e\xfc\xd1\x0c\x95\x96\xe4\xaf\x82\x0d\x2e\x7e\xfe\x21\x16\xd1\xf4\xe6\xdd\x53\x23\xcc\xc2\x5d\x2f\x14\x73\x52\xdb\xca\xf9\x36\x66\x49\x30\x87\x72\x08\xec\x47\x9d\x4b\x32\x14\xb7\x4d\x11\xba\x10\x4c\x89\xda\x6c\x61\x85\x61\xaa\x16\x07\xb8\x76\xba\x04\x43\xc3\x34\xbe\x77\x5c\xba\x57\x2e\x5d\xfe\x9a\xb8\xd3\xb2\x9b\xda\x43\x15\x8f\x65\xd6\x79\x2a\xb0\x97\xbd\xaa\x38\x06\x1c\x0a\x86\x6c\x39\xed\x2a\x71\x7b\x1c\x13\x24\x8c\xfe\xb5\x47\x2b\x71\xf8\x7f\xe8\xf5\x15\x13\x69\xa7\xdd\x98\x77\x91\x8b\xad\xeb\xff\x64\x0c\x34\xb8\x0e\x95\x0e\xe2\x7b\x0e\x2f\xb8\xa8\x51\x70\x62\x57\xc9\x06\x3d\xa5\xf0\xde\x81\xa7\xb2\x2f\x02\x13\x28\xe0\x35\x5f\x41\xd5\x7b\x69\xc8\x1f\xc7\xd8\x42\x9e\x04\xc9\x5c\x47\x16\xd8\xf5\xbe\xa0\x14\xde\x55\xbb\x70\x3b\xf4\x68\x9d\x2e\x07\x00\x41\x01\xdf\xdb\x21\x34\xb7\xb1\xa0\x2d\x0b\xda\xe0\xf3\x61\xd0\x07\x0d\xbb\x10\xeb\x0a\x57\x66\x0b\x0d\x99\x0e\xf4\x70\xda\x06\xad\x84\x68\xef\xf1\x7f\xd3\xa2\x36\x37\xd9\x12\x9e\xc4\x9d\xd1\xe5\x5f\x69\x8d\xf6\xd2\x59\xe2\xb4\xc0\x24\x7f\xb3\x46\x0b\x4f\xee\x2c\x7f\x17\xd3\x65\xbc\xc7\x12\x95\xf1\xe2\xf4\x33\x7f\x93\xa8\xf1\x1f\x33\x15\xff\x57\xfc\x4f\x00\x00\x00\xff\xff\x77\xd2\xb2\x7f\x6e\x14\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 5230, mode: os.FileMode(420), modTime: time.Unix(1479604435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _loadingHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x93\x41\x8f\xd3\x3e\x10\xc5\xef\xf9\x14\xb3\x96\xfe\xd2\x9f\x43\xe2\x16\xc4\xa5\x38\x41\xcb\x2e\x17\x24\xd4\x05\xf5\x00\x47\xd7\x99\x36\xee\x3a\x76\x98\x71\xd2\x2d\xab\x7e\x77\xe4\x36\xad\xc2\x2e\xa7\x64\xfc\x92\xf7\x7e\x6f\x94\xa8\x9b\xfb\xe5\xdd\xea\xe7\xc3\x67\x68\x62\xeb\xaa\x4c\x5d\x2e\xa8\xeb\x2a\x53\xce\xfa\x47\x20\x74\xa5\xe0\x78\x70\xc8\x0d\x62\x14\xd0\x10\x6e\x4a\xd1\xc4\xd8\xf1\x42\x4a\x53\xfb\x1d\x17\xc6\x85\xbe\xde\x38\x4d\x58\x98\xd0\x4a\xbd\xd3\x4f\xd2\xd9\x35\xcb\x75\xef\x5a\x2d\x67\xc5\xdb\xe2\x9d\x34\x3c\xce\x45\x6b\x7d\x61\x98\x45\x95\xa9\x68\xa3\xc3\xea\x93\xdd\x7e\xeb\x91\x0e\xb0\x0a\xc1\xf1\x02\xee\x02\x47\x18\x2c\xf7\xda\xd9\xdf\x3a\xda\xe0\x95\x3c\x3f\x99\xa9\x9b\x3c\x87\xd5\xf2\x7e\xb9\x80\xdb\x2f\xb7\x3f\x3e\x42\x9e\x57\x99\x6a\x31\x6a\x48\x4c\x39\xfe\xea\xed\x50\x0a\xc2\x0d\x21\x37\x02\x4c\xf0\x11\x7d\x2c\xc5\xfb\x14\x27\xc7\x6a\xeb\x50\x1f\xaa\x4c\x31\x9a\x64\x0e\xc6\x69\xe6\x52\x34\x48\x01\x2c\xe7\x1d\xd9\x56\xd3\x41\x54\x19\x80\xaa\xed\x30\xd5\xf3\xf4\xea\x49\xf9\x5b\x4b\x39\xda\x7a\xa4\x51\x03\x50\xcd\xfc\x22\x9e\xd8\x93\xf3\x5c\xbc\xe8\xaa\x64\x33\x1f\xcd\x64\x6d\x87\x53\xe2\xf9\x46\xc9\x91\xae\xca\x5e\x81\x8e\xe3\x2b\xc0\xb1\x6c\x4a\x6a\xb1\xb6\x7d\x0b\x2f\xb1\x26\x50\xdc\xaf\x4f\x5c\xa2\xfa\x8e\xba\xb6\x7e\x0b\x1b\x0a\x2d\x5c\xf9\x3a\x87\x9a\x11\xf6\xda\x46\x28\x8a\x62\x42\xda\x51\xd8\x12\x32\x5f\x9c\xae\xb3\xe5\xdc\x69\xda\xe2\x74\x89\x30\x68\xd7\x63\x29\x9e\x9f\x8b\x07\x24\x83\x3e\x1e\x8f\x02\x5a\xfd\x54\x8a\xf9\x6c\x26\xaa\xe9\xf9\x7f\x4a\x5e\xbc\x2e\x51\x49\xff\x8a\xcc\x7a\x8b\xc7\xa3\x92\xdd\xf5\xfc\xff\x55\x63\x53\x22\x98\x9e\x08\x7d\x74\x07\x18\x12\x36\xbb\xb0\x87\x4d\x20\x38\x93\x74\x14\x76\x68\x22\x7f\x80\x3d\x82\x26\x84\x7d\xa0\xc7\x54\x36\x78\xb0\xf1\xcd\xe8\xf8\xaf\x9d\xcb\xf1\x23\x91\xe7\xbf\xe2\x4f\x00\x00\x00\xff\xff\xd0\x3f\x38\xb9\x2d\x03\x00\x00")

func loadingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_loadingHtml,
		"loading.html",
	)
}

func loadingHtml() (*asset, error) {
	bytes, err := loadingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "loading.html", size: 813, mode: os.FileMode(420), modTime: time.Unix(1479590521, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _projectHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x4b\x6f\xe3\xb6\x13\xbf\xfb\x53\xcc\x9f\xc8\x02\xff\x1e\x2c\x3a\x69\x81\x02\x8e\xac\x02\xbb\x6e\xd1\x00\x7d\xa4\x68\x2e\x3d\x8e\xa5\x91\xc4\x94\x22\x5d\x92\x4e\x62\x08\xfa\xee\x05\x29\xc9\x91\x14\x39\x4d\x80\xed\x69\x7b\x92\x87\xf3\x7e\xfd\x48\xd7\x75\x46\xb9\x50\x04\x6c\x2b\xec\x5e\xe2\xf1\xd6\xe8\x7b\x4a\x1d\x6b\x9a\xba\x8e\x7e\x30\x82\x54\x26\x8f\xbf\x60\x45\xfe\x40\xe4\xa0\x08\xa2\x9b\x2d\x4c\x58\xf0\xff\xba\x8e\x6e\xb6\x4d\xf3\x55\x5d\x93\xca\xbc\x6c\xf8\x2c\xe2\xff\x6d\x7f\xfd\x74\xf7\xc7\xed\xf7\x50\xba\x4a\x26\x8b\xb8\xff\x10\x66\xc9\x22\x96\x42\xfd\x09\x86\xe4\x86\x59\x77\x94\x64\x4b\x22\xc7\xa0\x34\x94\x6f\x58\xe9\xdc\xde\xae\x39\x4f\x33\x75\x6f\xa3\x54\xea\x43\x96\x4b\x34\x14\xa5\xba\xe2\x78\x8f\x4f\x5c\x8a\x9d\xe5\xbb\x83\xac\x90\xaf\xa2\xab\xe8\x6b\x9e\xda\x8e\x8e\x2a\xa1\xa2\xd4\x5a\xf6\x79\x7c\xe4\x5a\xb9\x25\x3e\x92\xd5\x15\xf1\x6f\xa2\x6f\xa3\x55\x70\x35\x3c\x1e\x7a\x74\xc2\x49\x4a\x3e\x8a\xe2\xb7\x03\x99\x23\xdc\x69\x2d\xed\x1a\xea\xda\x51\xb5\x97\xe8\x5e\x16\x1b\xa2\xa6\x89\x79\xab\xb6\x88\x79\x57\x9c\x9d\xce\x8e\xc9\x22\xb6\x94\x3a\xa1\x15\xa4\x12\xad\xdd\xb0\x92\x8c\x06\x61\x97\x7b\x23\x2a\x34\x47\x96\x2c\x00\xe2\x4c\x3c\x0c\xf9\x4b\xaf\x1a\x38\x63\x5e\xaa\x95\x43\xa1\xc8\x74\x3c\x80\xb8\xbc\xec\x99\xc1\xbd\xb7\x7c\xc9\xde\x1f\x7b\x79\xd9\x79\xe3\x99\x78\x08\x21\xb5\x3f\x62\xde\x85\x9f\x2c\x5e\x64\xd2\x91\x2c\x39\x1f\xe2\x98\x23\x0f\x95\xb2\xb3\x69\x79\x8e\x0f\x5d\xa1\x31\xfa\x11\xbc\x11\x52\x6e\x98\x65\x72\xa7\x1d\x4a\x0b\xb9\x36\x6f\xcb\xa6\x57\x75\xb8\x93\x74\xaa\x91\x27\x18\x84\x41\xda\xb0\x47\x91\xb9\x72\x0d\x78\x70\xfa\xfa\xe4\xcb\xab\x98\x67\xc2\x93\xe5\x44\xe1\x72\xb5\xda\x3f\x5d\xb3\xe4\xe3\xd1\x91\x8d\xb9\x2b\xc7\xe2\x59\x52\xd7\xd1\x8f\x87\x0a\x55\x10\x08\xa3\x91\x0d\xcc\xf3\xa1\xfd\x37\x3b\xfb\xa4\xad\x9b\xf3\x75\x51\xd7\x7b\x23\x94\xcb\x81\x7d\x88\xae\x72\x06\x51\xa8\x94\x17\x6f\x1a\x5e\x69\xe5\xca\xf3\xfe\x63\x1e\x2a\x32\xdf\xfb\xf7\xf6\xaf\xeb\xda\x73\x1f\x47\xfd\xfb\x09\x4d\x41\xd6\xc1\x16\x1d\x5a\x72\xf6\x1f\xbb\x34\xac\x51\xbb\x51\xc3\xc4\x47\x55\x0b\x22\xc9\xb4\x3a\xaf\x9c\xf6\x35\x76\xf4\xe4\x96\x28\x45\xa1\xd6\x60\x44\x51\xba\x6b\x96\x5c\xf0\x9f\xbb\xa2\xbd\x4f\x6f\x76\x1a\xda\x18\xba\x9c\xe1\x66\xfb\xa2\x83\xe3\x61\xe0\x5d\xa6\x83\xd4\x5b\x14\x79\xd6\xa8\xeb\x8b\x7d\x3b\xec\x37\x5b\x58\x6f\x20\xc0\xf6\x98\xef\xfc\x00\x84\x70\x82\xc0\xdd\x89\x9c\x08\x1a\x54\x05\x41\xd4\x45\xf7\xbb\xd3\x06\x0b\x1a\xc9\xcc\xd4\x39\xeb\x6b\xf0\x40\xc6\x89\x14\x65\x5f\x87\x4a\x64\x99\xa4\x6b\x98\xcc\xed\x48\x1d\x20\xde\x1b\x5d\x18\xb2\xb6\x6f\xf6\x89\x16\x76\x69\x2b\x94\x92\xc1\x03\xca\x03\x6d\x58\x5d\x47\xb7\x64\x52\x3f\x52\x83\x94\x9a\x86\x41\x85\x4f\x1b\x76\xb9\x5a\x4d\x37\xb9\xf7\x79\x4e\x33\xe6\xbd\xb7\x49\x56\xa3\x05\x99\xe4\xd9\xd9\xbe\xf2\xa6\x61\xae\xf1\xe7\xbc\x7d\x78\xd5\xec\xec\xe8\xbd\xd8\xe5\xad\x96\x12\x8d\xbd\x25\x13\x86\x72\x8a\x25\x6f\xb0\xf9\x2a\x16\x75\xfa\x49\x2c\xfa\x76\xe4\x08\x39\x2e\x33\x74\xb8\x43\x4b\x2c\x89\xb9\x48\x20\xc6\xc9\x7d\xbb\x13\xc5\x5f\xfe\x7e\x69\xaf\xdc\xa8\xd0\xba\x90\xed\xa5\x9b\xb5\xc3\xc4\x87\x63\xda\x34\xeb\xee\x79\x11\xc2\xf1\x3f\x62\x8e\xc9\x34\x94\xf1\x2e\xf8\x01\x6d\xdf\x20\x03\xfe\x70\x19\x4e\xd8\xb5\x98\x41\x99\x3b\xcf\xfa\xa2\x30\x26\x64\xfc\x99\x10\xa6\x03\x86\x60\xf2\x3f\x58\x98\xcf\xf3\x4b\x84\x85\x6e\x69\xde\x8b\x09\x41\xed\x0c\x22\x7c\xe7\x70\xb7\xc9\xc8\xa1\x90\xf6\x5f\x41\x07\x98\x7d\xd5\xfa\xcf\xe8\x6d\xcb\xbb\xd7\x3a\x0f\x7f\x70\xfe\x0e\x00\x00\xff\xff\xfe\xe6\x2a\xe7\x57\x0d\x00\x00")

func projectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_projectHtml,
		"project.html",
	)
}

func projectHtml() (*asset, error) {
	bytes, err := projectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "project.html", size: 3415, mode: os.FileMode(420), modTime: time.Unix(1479590702, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _select_projectHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\xb1\x8e\xd4\x30\x10\xed\xf3\x15\x43\x2a\x28\x62\xdf\x01\x12\xd2\xc9\x97\x02\x0e\xa4\x6b\xe0\x10\xd7\x50\x4e\xec\xc9\xc6\x7b\x8e\x1d\x6c\xef\x42\x64\xe5\xdf\x91\xb3\xd9\x25\x7b\x4b\x41\x41\xe5\xd8\x6f\xe6\xbd\xe7\x17\x4f\x4a\x8a\x5a\x6d\x09\xca\x3b\x1d\x06\x83\xe3\x83\x77\x5b\x92\xb1\x9c\xa6\x94\xd8\x27\xaf\xc9\x2a\x33\x7e\xc6\x9e\xf2\x81\x6e\xc1\x12\xb0\x7b\x05\xcf\x20\x78\x99\x12\xbb\x57\xd3\xf4\x2a\x25\xb2\x2a\xd7\xce\x4b\x21\x5e\xdc\x7d\xf9\xf0\xf8\xfd\xe1\x23\x74\xb1\x37\x75\x21\x8e\x0b\xa1\xaa\x0b\x61\xb4\x7d\x02\x4f\xe6\xb6\x0c\x71\x34\x14\x3a\xa2\x58\x42\xe7\xa9\xbd\x2d\xbb\x18\x87\x70\xc3\xb9\x54\x76\x1b\x98\x34\x6e\xa7\x5a\x83\x9e\x98\x74\x3d\xc7\x2d\xfe\xe2\x46\x37\x81\x37\x3b\xd3\x23\xbf\x62\xaf\xd9\x1b\x2e\xc3\xb2\x67\xbd\xb6\x4c\x86\x50\xfe\x1f\x8d\xd6\xd9\x58\xe1\x4f\x0a\xae\x27\xfe\x96\xbd\x63\x57\xb3\xd4\xfa\x78\xad\x18\x75\x34\x54\xbf\xd7\x9b\xaf\x3b\xf2\x23\x3c\x3a\x67\xc2\x0d\x7c\x23\x43\x32\x02\xc2\x70\x88\x58\xf0\x43\x5d\x21\xf8\x92\x46\xe3\xd4\x58\x17\x22\x90\x8c\xda\x59\x90\x06\x43\xb8\x2d\x3b\xf2\x0e\x74\xa8\x06\xaf\x7b\xf4\x63\x59\x17\x00\x42\xe9\xfd\x1a\xaf\x72\xeb\x8c\x9c\x63\xd2\xd9\x88\xda\x92\x5f\x30\x00\xd1\x5d\x1f\xc1\x59\x3e\x33\x5f\x97\xcf\xcc\x0a\xde\x5d\x2f\x64\x5c\xe9\xfd\xac\x78\xf8\x10\x7c\x71\x57\x17\x17\x46\x97\xed\x85\x41\xe9\xcc\xae\xb7\x21\x2b\xf5\xae\xd1\x86\xfe\x6a\x34\xd7\xe4\x92\x0e\x4d\x9b\x57\xd7\xb6\x81\x62\xe5\x2c\x55\x3f\x76\xe8\xe3\xfa\x0e\x16\x4f\x8d\x03\x5a\x32\x27\x04\x40\x0c\x67\x48\x95\xa3\xd5\x76\x53\xd6\x97\xf1\x0f\x75\x71\x6a\x4b\xc9\xa3\xdd\x10\xb0\xe5\xfd\x87\x69\xfa\x43\x89\xe7\x94\x8d\x71\xf2\x29\x5b\x44\x19\xf5\x9e\x8e\x6f\x89\x2f\xc4\x81\x2f\xb3\xb0\x72\x05\x20\xc2\x80\xf6\x9c\x47\xcb\x1c\x96\xd0\xc7\xd3\x16\xa1\xc5\x4a\x61\xc4\x06\x03\x95\xb5\xe0\xba\x16\x3c\xf7\xad\x89\x52\x8a\xd4\x0f\x06\xe3\xe5\xcc\x02\x5b\xbb\xe6\x58\xaf\xae\x77\x18\xc7\x63\x80\xdc\xe2\xfe\x1f\x7e\x30\x5f\x5e\x24\x9f\xa7\xf6\x77\x00\x00\x00\xff\xff\xc5\x3b\xcc\xed\x2c\x04\x00\x00")

func select_projectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_select_projectHtml,
		"select_project.html",
	)
}

func select_projectHtml() (*asset, error) {
	bytes, err := select_projectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "select_project.html", size: 1068, mode: os.FileMode(420), modTime: time.Unix(1479576707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"loading.html": loadingHtml,
	"project.html": projectHtml,
	"select_project.html": select_projectHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"loading.html": &bintree{loadingHtml, map[string]*bintree{}},
	"project.html": &bintree{projectHtml, map[string]*bintree{}},
	"select_project.html": &bintree{select_projectHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

